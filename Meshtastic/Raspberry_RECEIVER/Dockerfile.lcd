# ============================================================================
# Dockerfile per LCD Display Service (Multi-Stage)
# ============================================================================
# Stage 1: Builder
# Compila le dipendenze Python in wheels
# ============================================================================
FROM python:3.11-bullseye as builder

LABEL stage="builder"

ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV DEBIAN_FRONTEND=noninteractive

# Install build dependencies for Python packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    python3-dev \
    gcc \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Upgrade pip and install wheel package
RUN pip install --no-cache-dir --upgrade pip wheel

# Create a temporary requirements_lcd.txt for this build stage
# to define dependencies for the LCD service
RUN echo "RPLCD==1.3.1" > requirements_lcd.txt && \
    echo "netifaces==0.11.0" >> requirements_lcd.txt && \
    echo "psutil==5.9.5" >> requirements_lcd.txt

# Build wheels for LCD dependencies
RUN pip wheel --no-cache-dir -r requirements_lcd.txt -w /app/wheels

# ============================================================================
# Stage 2: Final image
# Utilizza i wheels pre-compilati e codice LCD
# ============================================================================
FROM python:3.11-slim-bullseye as final

LABEL stage="final"
LABEL maintainer="OriBruni <support@oribruni.com>"
LABEL description="OriBruni LCD Display Service"
# Consider updating version for new build strategy
LABEL version="1.0.1"

ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV DEBIAN_FRONTEND=noninteractive

# Install only runtime system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    i2c-tools \
    python3-smbus \
    && rm -rf /var/lib/apt/lists/*

# Crea utente non-root
RUN groupadd -r oribruni && useradd --no-log-init -r -g oribruni oribruni

WORKDIR /app

# Copy pre-built wheels from the builder stage
COPY --from=builder /app/wheels /wheels

# Create a temporary requirements_lcd.txt again for installing from wheels
RUN echo "RPLCD==1.3.1" > requirements_lcd.txt && \
    echo "netifaces==0.11.0" >> requirements_lcd.txt && \
    echo "psutil==5.9.5" >> requirements_lcd.txt

# Install Python packages from local wheels
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir --no-index --find-links=/wheels -r requirements_lcd.txt

# Copia solo i file necessari per LCD
COPY lcd_display/ ./lcd_display/
# Assumes config.ini is at the root of build context (Meshtastic/Raspberry_RECEIVER/)
COPY config.ini .

# Imposta permessi
RUN chown -R oribruni:oribruni /app

# Cambia utente
USER oribruni

# Health check
HEALTHCHECK --interval=60s --timeout=10s --start-period=10s --retries=3 \
    CMD python -c "import sys; sys.exit(0)" # Basic check, consider a more specific one if possible

# Comando di avvio
CMD ["python", "lcd_display/lcd_display.py"]
