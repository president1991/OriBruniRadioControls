# ============================================================================
# Docker Compose per OriBruni Raspberry RECEIVER
# ============================================================================
# Stack completo con MySQL, phpMyAdmin, Nginx e applicazione Python
# Ottimizzato per Raspberry Pi 4
# SICUREZZA: Usa variabili d'ambiente dal file .env
# ============================================================================

version: '3.8'

services:
  # Database MySQL
  mysql:
    image: mysql:8.0
    container_name: oribruni-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-OriBruniRadioControls}
      MYSQL_USER: ${MYSQL_USER:-meshdash}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./backups:/backups
    ports:
      - "3306:3306"
    networks:
      - oribruni-network
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # phpMyAdmin
  phpmyadmin:
    image: linuxserver/phpmyadmin:latest # Usare immagine alternativa da LinuxServer.io
    # platform: linux/arm64/v8 # Solitamente non necessario per immagini linuxserver
    container_name: oribruni-phpmyadmin
    restart: unless-stopped
    environment:
      PMA_HOST: mysql # Mantenuto, potrebbe funzionare
      # PMA_PORT: 3306 # Solitamente non necessario se PMA_HOST è specificato
      # PMA_USER: root # Le immagini LinuxServer potrebbero avere default diversi o usare PUID/PGID
      # PMA_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD} # Mantenuto per compatibilità, ma verificare documentazione linuxserver
      UPLOAD_LIMIT: 100M # Mantenuto
      # PUID: 1000 # Esempio, da impostare con l'ID del tuo utente
      # PGID: 1000 # Esempio, da impostare con l'ID del tuo gruppo
      DB_ENGINE: mysql # Specifica il tipo di database per linuxserver/phpmyadmin
    ports:
      - "8080:80"
    networks:
      - oribruni-network
    depends_on:
      mysql:
        condition: service_healthy

  # Applicazione Python OriBruni Receiver
  app:
    image: ghcr.io/president1991/oribruni-receiver-app:latest # MODIFIED: Build on server, pull from GHCR
    container_name: oribruni-receiver
    restart: unless-stopped
    environment:
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_USER=${MYSQL_USER:-meshdash}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE:-OriBruniRadioControls}
      - FLASK_ENV=${FLASK_ENV:-production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./config.ini:/app/config.ini:ro
      - ./logs:/app/logs
      - /dev:/dev  # Per accesso dispositivi seriali
    ports:
      - "5000:5000"
    networks:
      - oribruni-network
    depends_on:
      mysql:
        condition: service_healthy
    privileged: true  # Necessario per accesso I2C e seriale
    devices:
      - /dev/i2c-1:/dev/i2c-1  # Per display LCD
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: oribruni-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - oribruni-network
    depends_on:
      - app
      - phpmyadmin

  # Servizio LCD Display (opzionale)
  lcd-display:
    image: ghcr.io/president1991/oribruni-lcd-display:latest # MODIFIED: Build on server, pull from GHCR
    container_name: oribruni-lcd
    restart: unless-stopped
    environment:
      - I2C_ADDRESS=${I2C_ADDRESS:-0x27}
      - I2C_PORT=${I2C_PORT:-1}
      - UPDATE_INTERVAL=${UPDATE_INTERVAL:-30}
    volumes:
      - /dev/i2c-1:/dev/i2c-1
    networks:
      - oribruni-network
    privileged: true
    group_add:
      - "994" # Aggiunge l'utente del container al gruppo i2c dell'host (GID 994)
    depends_on:
      - app

  # Servizio Backup automatico
  backup:
    image: mysql:8.0
    container_name: oribruni-backup
    restart: "no"
    environment:
      MYSQL_HOST: mysql
      MYSQL_USER: root
      MYSQL_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-OriBruniRadioControls}
      RETENTION_DAYS: ${RETENTION_DAYS:-30}
      VERIFY_BACKUP: ${VERIFY_BACKUP:-false}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - oribruni-network
    depends_on:
      mysql:
        condition: service_healthy
    command: /bin/bash /backup.sh
    profiles:
      - backup  # Avvia solo quando richiesto

# Volumi persistenti
volumes:
  mysql_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/mysql

# Rete dedicata
networks:
  oribruni-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ============================================================================
# SICUREZZA - IMPORTANTE!
# ============================================================================
# 
# 1. Crea il file .env con le tue password:
#    cp .env.example .env
#    nano .env
#
# 2. Genera password sicure:
#    openssl rand -base64 32
#
# 3. Il file .env è nel .gitignore e NON sarà committato
#
# ============================================================================
# Comandi utili:
# ============================================================================
# 
# Avvio stack completo:
#   docker-compose up -d
#
# Avvio solo servizi principali:
#   docker-compose up -d mysql app nginx
#
# Backup database:
#   docker-compose --profile backup run --rm backup
#
# Logs in tempo reale:
#   docker-compose logs -f app
#
# Restart servizio:
#   docker-compose restart app
#
# Stop e rimozione:
#   docker-compose down
#
# Stop con rimozione volumi:
#   docker-compose down -v
#
# Build e restart:
#   docker-compose up -d --build
#
# Accesso shell container:
#   docker-compose exec app bash
#   docker-compose exec mysql mysql -u root -p
#
# Monitoraggio risorse:
#   docker stats
#
# ============================================================================
